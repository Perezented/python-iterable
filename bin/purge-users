#!/usr/bin/env python
# coding: utf-8
import argparse
import sys
import json
import functools
from multiprocessing.pool import ThreadPool as Pool

import requests

EXPORT = "https://api.iterable.com:443/api/export/data.json"
DELUSER = "https://api.iterable.com:443/api/users/delete"


def delete_user(apikey, line):
    user = json.loads(line)
    email = user.get('email')
    if not email:
        return

    try:
        params = {'apiKey': apikey}
        data = {'email': email}
        r = requests.post(DELUSER, params=params, data=json.dumps(data))
        if r.status_code == 200:
            sys.stdout.write('.')
            sys.stdout.flush()
        else:
            print "    ERROR: %s" % (r.status_code,)
    except Exception as e:
        print "    EXCEPTION: %s" % (e,)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("apikey", help="Iterable API key")
    # parser.add_argument("-n", "--batchsize", type=int, default=20, help="batch size")
    args = parser.parse_args()

    params = {
        'dataTypeName': 'user',
        'range': 'All',
        'apiKey': args.apikey,
    }

    r = requests.get(EXPORT, params=params)
    if r.status_code != 200:
        print "Received an unexpected response from iterable:"
        print "  ", r.status_code
        print "  ", r.headers
        print "  ", r.text
        return 1

    lines = r.text.splitlines()
    print "This will delete %s users, are you sure you want to continue?" % len(lines)
    answer = raw_input("[yes/NO] ")
    if answer.lower() != 'yes':
        print "Exiting"
        return 0

    # all the threads!
    pool = Pool(processes=8)
    pool.map(functools.partial(delete_user, args.apikey), lines)

    print "DONE"
    return 0


if __name__ == '__main__':
    sys.exit(main())
